// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean? @default(true)

  email              String  @unique
  hashedPassword     String
  // Hashed refresh token
  hashedRefreshToken String?

  username String? @unique
  elo      Int?    @default(400)

  relationships        Relationship[] @relation("UserRelationships")
  relatedRelationships Relationship[] @relation("RelatedUserRelationships")

  westPlayer GameSession[] @relation("WestPlayer")
  eastPlayer GameSession[] @relation("EastPlayer")

  @@map("users")
}

model Relationship {
  userId        Int
  relatedUserId Int
  type          RelationshipEnum

  user        User @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserRelationships")
  relatedUser User @relation(fields: [relatedUserId], references: [id], onDelete: Cascade, name: "RelatedUserRelationships")

  @@id([userId, relatedUserId])
  @@unique([userId, relatedUserId])
  @@map("relationships")
}

enum RelationshipEnum {
  PENDING
  REJECT
  FRIEND
  BLOCK
}

model GameSession {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  westPlayerId Int
  eastPlayerId Int

  westPlayer User @relation(fields: [westPlayerId], references: [id], onDelete: Cascade, name: "WestPlayer")
  eastPlayer User @relation(fields: [eastPlayerId], references: [id], onDelete: Cascade, name: "EastPlayer")

  // Team enum
  winnerId   Int?
  winnerTeam Int?
}
